<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>始まれば終わる</title>
    <link>https://ktnyt.github.io/</link>
    <description>Recent content on 始まれば終わる</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>kotone.nyan@gmail.com</contact>
    <copyright>&copy; <a href="https://github.com/ktnyt">Kotone Itaya</a> 2018</copyright>
    
        <atom:link href="https://ktnyt.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Multiprocess Semaphores</title>
      <link>https://ktnyt.github.io/post/posix/semaphore/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      <author>Kotone Itaya</author>
      <guid>https://ktnyt.github.io/post/posix/semaphore/</guid>
      <description>Basic usage of semaphores across multiple processes</description>
      
      <content>

&lt;p&gt;Semaphores are useful for simple synchronization between processes.&lt;br /&gt;
Here is a simple example for synchronizing two processes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;semaphore.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

#include &amp;lt;iostream&amp;gt;

int main() {
	pid_t pid = fork();

	// 1. Create semaphore
	sem_t* sem = sem_open(&amp;quot;/mysem&amp;quot;, O_CREAT, 0600, 0);

	if(pid == 0) {
		std::cout &amp;lt;&amp;lt; &amp;quot;Children first&amp;quot; &amp;lt;&amp;lt; std::endl;
		// 3. Increment semaphore to unblock parent
		sem_post(sem);

		// 4. Close the semaphore
		sem_close(sem);
	} else {
		// 2. Block until child increments
		sem_wait(sem);
		std::cout &amp;lt;&amp;lt; &amp;quot;Parents second&amp;quot; &amp;lt;&amp;lt; std::endl;

		// 4. Close the semaphore
		sem_close(sem);

		// 5. Unlink the semaphore
		sem_unlink(&amp;quot;/mysem&amp;quot;);
	}

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-create-semaphore&#34;&gt;1. Create semaphore&lt;/h3&gt;

&lt;p&gt;Creating a semaphore is straightforward using the &lt;code&gt;sem_open&lt;/code&gt; function. The first argument is the name of the semaphore. Other processes will be able to refer to this semaphore with this name. The second argument is the open flag, which specifies how the semaphore should be opened. The most commonly used value is &lt;code&gt;O_CREAT&lt;/code&gt; as it will create a semaphore if it does not exist, and open it otherwise. By specifying the &lt;code&gt;O_CREAT | O_EXCL&lt;/code&gt; flag &lt;code&gt;sem_open&lt;/code&gt; will return an error if the semaphore already exists. The third and fourth arguments are mode and value respectively, and will be ignored if the semaphore already exists. The mode sets the disk permissions for the semaphore. I would personally prefer &lt;code&gt;0600&lt;/code&gt; just to be safe but other values like &lt;code&gt;0666&lt;/code&gt; should be just fine. The value argument determines the initial semaphore value, which typically should be 0 unless there are plans to call &lt;code&gt;sem_wait&lt;/code&gt; immediately. The returned value is a semaphore descriptor or an errno in case of an error.&lt;br /&gt;
Here the semaphore is created right after &lt;code&gt;fork&lt;/code&gt; to open the same semaphore on both the parent and child processes. This can be done separately and indeed would probably be much more common to do so, but for demonstration purposes this way of opening the same semaphore on both processes made the code a little bit clearer.&lt;/p&gt;

&lt;h3 id=&#34;2-block-until-child-increments&#34;&gt;2. Block until child increments&lt;/h3&gt;

&lt;p&gt;Looking into the parent code, &lt;code&gt;sem_wait&lt;/code&gt; is called on the previously created semaphore first, assuming that the &lt;code&gt;cout&lt;/code&gt; will cause some overhead in the child process. This will attempt to decrement the semaphore value, but as the value is initialized to 0, it cannot. Therefore the process will block until the semaphore value is incremented. When the semaphore is incremented elsewhere, the value will become greater than 0, allowing the process to decrement the value and carry on.&lt;/p&gt;

&lt;h3 id=&#34;3-increment-semaphore-to-unblock-parent&#34;&gt;3. Increment semaphore to unblock parent&lt;/h3&gt;

&lt;p&gt;After the child process writes out a string, it will call &lt;code&gt;sem_post&lt;/code&gt; to increment the semaphore value. This will set the semaphore value to 1, allowing the parent process to decrement the value and proceed.&lt;/p&gt;

&lt;h3 id=&#34;4-close-the-semaphore&#34;&gt;4. Close the semaphore&lt;/h3&gt;

&lt;p&gt;Once the operations on the semaphore are finished, both processes should close the semaphore to clean up by calling &lt;code&gt;sem_close&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;5-unlink-the-semaphore&#34;&gt;5. Unlink the semaphore&lt;/h3&gt;

&lt;p&gt;Closing the semaphore is not enough to completely clean up the named semaphore. To remove the semaphore sitting on disk, a call to &lt;code&gt;sem_unlink&lt;/code&gt; with the semaphore name as the argument is required.&lt;/p&gt;

&lt;p&gt;In order to use semaphores correctly, error handling is necessary. This is use-case dependent so look through the semaphore manuals.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Diary #2 (2018/09/29)</title>
      <link>https://ktnyt.github.io/post/2018-09-29/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      <author>Kotone Itaya</author>
      <guid>https://ktnyt.github.io/post/2018-09-29/</guid>
      <description>Diary Entry for 2018/09/29</description>
      
      <content>&lt;p&gt;今日からしばらく大阪生活。09:00に起きてしばらく食べられなくなる母の作った朝ごはんを食べる。白いごはんに納豆とシーチキン入りの卵焼き。&lt;br /&gt;
荷造りをして両親に見守られながら10:50に家を出発。&lt;br /&gt;
ボクスターちゃんを転がすこと7時間、17:50くらいに新居に到着。&lt;br /&gt;
ひとりぼっちの寂しさに包まれながらも迫りくる台風に備えてお茶と非常食を準備。&lt;/p&gt;

&lt;p&gt;夜ご飯はおでん。大根、煮玉子、ちくわ、ロールキャベツ。そこそこバランス良い？ほんとはもっと野菜が食べたい&amp;hellip;&lt;br /&gt;
コンビニの食べ物の中では家庭的な味がするのでいいですね、おでん。&lt;br /&gt;
外食やコンビニばかりというのもなんとなく避けたいのでやっぱり自炊しようかな。&lt;br /&gt;
とりあえず冷蔵庫を買わないと&amp;hellip;&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Diary #1 (2018/09/28)</title>
      <link>https://ktnyt.github.io/post/2018-09-28/</link>
      <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
      <author>Kotone Itaya</author>
      <guid>https://ktnyt.github.io/post/2018-09-28/</guid>
      <description>Diary Entry for 2018/09/28</description>
      
      <content>

&lt;h2 id=&#34;dwango-ai-lab-scouty退社と独り立ち&#34;&gt;Dwango AI Lab・Scouty退社と独り立ち&lt;/h2&gt;

&lt;p&gt;2018/10/01を持って理研のリサーチアソシエイトとして勤務することになり、2018/09/27にドワンゴAIラボを、2018/9/28にScoutyを退社することにった。&lt;/p&gt;

&lt;p&gt;ドワンゴAIラボに常駐するようになったのは2017年の6月くらい、全脳アーキテクチャ主催の海馬ハッカソンの周辺環境開発の手伝いに駆り出されたのがきっかけだった。&lt;br /&gt;
それからはAIラボの関連開発をしつつ、自分の研究を進めつつ、本格的にアルバイトとして2017年11月に入社してからやってきた。&lt;/p&gt;

&lt;p&gt;Scoutyさんからは2018/04/19日、スカウトメールが来た。&lt;br /&gt;
当初は戸惑った。突然知らない会社からスカウトメールなんて。転職サイトには&amp;hellip; 興味本位で登録したことこそあれど本気で就職活動をしたことはなかった。&lt;br /&gt;
そんな中で、スカウトされた。&lt;br /&gt;
もちろん最初は「なんだこれ&amp;hellip;」と思った。でも調べてみるとどうもネットに公開されている情報を使って人材マッチングをしているらしい。&lt;br /&gt;
つまり自社サービスを活用して私にたどり着いたということ。&lt;br /&gt;
スカウトメールの中身もしっかりしており、採用に力を入れていることがすぐに感じられた。&lt;/p&gt;

&lt;p&gt;会社を訪問して、丸山さんと高濱さんとおしゃべりをして、とても楽しそうな会社だなと思った。&lt;br /&gt;
博士過程に在籍中なのでインターンとして雇ってほしいと相談したところ、快諾してくれた。&lt;br /&gt;
denzow先生とぽてさんにスキルチェックをしていただいて、ちょっと調子にのって途中までGoで書いてて「間に合わないかも」と思ってPythonに切り替えたりとか&amp;hellip;&lt;br /&gt;
そして2018年7月、晴れてWebインターンとして入社することができた。&lt;/p&gt;

&lt;p&gt;当初は技術のキャッチアップが大変だろうからという理由であまりコアの開発には関われなさそうだったところを、初日のペアプロでdenzow先生が手取り足取り教えてくれたおかげで本当にすっとアプリケーションのおおまかな設計方針がわかった。&lt;br /&gt;
おかげでいくつか野良のチケットを拾って回収したり、スクラムのイベントに参加してアジャイル開発のフローを経験したりということができた。&lt;br /&gt;
その後も翁さんにVueのコードのウォークスルーをしていただいてリファクタリングに手を出してみたり。あれはぶっちゃけ地獄だった。めちゃくちゃ楽しかったけど社員だったらやりたくないなと言う感じ。&lt;br /&gt;
おかげでエンタープライズ向けの開発でどういうお作法に則ったらいいかなどを学ぶことができた。&lt;/p&gt;

&lt;p&gt;短い期間しかいないことがわかっていたのに、本当にたくさんのことを、時間を使って教えてくれた。&lt;br /&gt;
特にスクラムマスターのshowwinさんには本当にいろいろなことを相談させていただいて、とても勉強になった。&lt;br /&gt;
Devの皆さんは本当に全員がとても優秀で、毎日新たな発見があった。&lt;br /&gt;
Bizの皆さんとはあまりお仕事の話はできなかったけれど、一社員のように気さくに接してくれた。&lt;br /&gt;
そして今日、たった三ヶ月しかいなかった私を本当に暖かく送り出してくれた。&lt;br /&gt;
本当に、ありがとうございました。&lt;/p&gt;

&lt;p&gt;アイドルマスターシンデレラガールズについて熱く5分間語ってオフィスをあとにした。&lt;br /&gt;
オタク機械学習勉強会で知り合ったdasoranさんとこくたんさんと美味しいワインを飲んだ。&lt;br /&gt;
そして帰宅して今、こうしてブログを書いている。&lt;/p&gt;

&lt;p&gt;思えば日本に帰国してから12年間この家に住んで、11年間SFCに通い続けた。&lt;br /&gt;
そんな環境にお別れをするのが、寂しくない訳がない。&lt;br /&gt;
感動して泣くということは結構あったけれど、純粋な自分の感情に突き動かされて涙を流すのはかなり久しぶりな気がする。&lt;br /&gt;
もちろんずっと向こうにいるわけではない、とりあえず博士号を取るまでの一年半だし、その後は東京に戻って来たいという気持ちは強い。&lt;br /&gt;
いつかまた東京で、願わくばScoutyで仕事ができれば、幸せかもしれない。&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Hello, world.</title>
      <link>https://ktnyt.github.io/post/hello/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate>
      <author>Kotone Itaya</author>
      <guid>https://ktnyt.github.io/post/hello/</guid>
      <description>First blog post.</description>
      
      <content>&lt;p&gt;Welcome to ktnyt&amp;rsquo;s blog.&lt;/p&gt;

&lt;p&gt;I will randomly post things related to Go, C++, and more.&lt;br /&gt;
Programming related things will be in English. Other things will occasionally be in Japanese.&lt;/p&gt;

&lt;p&gt;The blog title is a quote by Natsumi TAKAMORI which roughly translates to &amp;ldquo;What&amp;rsquo;s begun, will end&amp;rdquo;. Its original nuance is that &amp;ldquo;bad things will eventually pass&amp;rdquo;, but I personally think it can be applied to many more things in life.&lt;/p&gt;

&lt;p&gt;私のブログへようこそ。&lt;/p&gt;

&lt;p&gt;Go や C++ またはその他もろもろのことについて適当に投稿します。&lt;br /&gt;
プログラミング関連のことは英語で、他のことは気分で日本語でも書きます。&lt;/p&gt;

&lt;p&gt;ブログのタイトルは高森奈津美さんからの引用です。「始まったことはいずれ終わりが来る」という意味で、嫌なことを乗り切る時に心の中で唱えるそうです。個人的にはもっといろいろな場面に使えそうだなと思って気に入ってます。&lt;/p&gt;
</content>
      
    </item>
    
  </channel>
</rss>